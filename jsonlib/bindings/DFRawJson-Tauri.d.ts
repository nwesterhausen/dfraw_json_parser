// File generated by specta. Do not edit!
//
/// lib/tauri_lib library

/**
 * Details about the current file being parsed, specifically where and what it is.
 */
export type ProgressDetails = {
	/**
	 * The current module location (only for stuff parsed via a specified location, otherwise is `RawModuleLocation::Unknown`)
	 */
	location: RawModuleLocation;
	/**
	 * The module the current file is in (if any)
	 */
	module: string | null;
	/**
	 * The parsed name of the file being parsed (if it can be determined)
	 */
	rawFile: string | null;
	/**
	 * The location of the file being parsed (if it can be determined)
	 */
	fileLocation: string | null;
};

/**
 * Tasks that describe what the parser is currently doing.
 */
export type ProgressTask =
	/**
	 * Parsing a raw file
	 */
	| "parseRaws"
	/**
	 * Parsing a legends file
	 */
	| "parseLegends"
	/**
	 * Parsing a module `info.txt` file
	 */
	| "parseModuleInfoFiles"
	/**
	 * Resolving raws.
	 *
	 * Creature raws (and others, but only creature raws are currently supported) can reference other creatures
	 * from the entire set of raws. This requires all the raws to be parsed before the references can be resolved.
	 *
	 * Eventually, this step will include other raw types, because it enables things like `CUT_X`, `SELECT_X`, etc.
	 */
	| "resolveRaws"
	/**
	 * Sitting idle, probably sending a progress update or not yet started.
	 *
	 * This step also includes the time spent parsing the `ParserOptions` and validating them.
	 */
	| "idle";

/**
 * A payload that can be used to gauge the progress of the parsing process.
 */
export type ProgressPayload = {
	/**
	 * The details of the current progress.
	 */
	details: ProgressDetails;
	/**
	 * The current task.
	 */
	currentTask: ProgressTask;
	/**
	 * The estimated percentage of completion.
	 */
	percentage: number;
	/**
	 * The current total number of raws parsed.
	 */
	runningTotal: string;
};

/**
 * Raws are part of modules since 50.xx. Raw modules are loaded from 3 common locations:
 * `{df_directory}/data/vanilla`, `{df_directory}/mods`, and `{df_directory/data/installed_mods}`
 */
export type RawModuleLocation =
	/**
	 * The "installed" mods directory
	 */
	| "InstalledMods"
	/**
	 * The "downloaded" mods directory
	 */
	| "Mods"
	/**
	 * The vanilla data file location
	 */
	| "Vanilla"
	/**
	 * An unknown location
	 */
	| "Unknown"
	/**
	 * Used for handling legends exported files
	 */
	| "LegendsExport";
