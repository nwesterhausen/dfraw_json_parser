use specta::ts::{export, BigIntExportBehavior, ExportConfig};

fn header(struct_path: &str) -> String {
    format!("// File generated by specta. Do not edit!\n//\n/// lib/{struct_path}\n\n")
}

struct TypescriptBinding {
    output_path: std::path::PathBuf,
}

impl TypescriptBinding {
    const fn new(output_path: std::path::PathBuf) -> Self {
        Self { output_path }
    }

    fn write(&self, struct_path: &str, bindings_filename: &str, imports: Option<String>, x: &str) {
        match std::fs::write(
            self.output_path
                .join(bindings_filename)
                .as_os_str()
                .to_str()
                .unwrap_or_default(),
            format!(
                "{}\n{}\n{}",
                header(struct_path),
                imports.unwrap_or_default(),
                &x
            ),
        ) {
            Err(e) => {
                eprintln!("{e:?}");
                eprintln!("Failed to write bindings for {struct_path} to {bindings_filename}");
            }
            Ok(()) => {
                println!("Wrote bindings for {struct_path} to {bindings_filename}");
            }
        }
    }
}

#[test]
#[allow(clippy::too_many_lines, clippy::cognitive_complexity)]
fn generate_ts_bindings() {
    // get our current working directory
    let cwd = std::env::current_dir().expect("Failed to get current working directory");
    // set lib/bindings/AllBindings.d.ts as the output file
    let output_dir = cwd.join("bindings");
    // make sure output dir exists
    std::fs::create_dir_all(&output_dir).expect("Failed to create output directory");
    eprintln!("Output dir: {:?}", &output_dir);
    let ts_bindings = TypescriptBinding::new(output_dir);

    let config = ExportConfig::default().bigint(BigIntExportBehavior::String);

    let bindings: Vec<String> = vec![
        match export::<dfraw_parser::tags::BiomeTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::BiomeTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::CasteTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::CreatureTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::ColorModificationTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::ColorModificationTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::ConditionTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::ConditionTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::CreatureTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::CreatureTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::CreatureEffectTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::CreatureEffectTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::CreatureEffectPropertyTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::CreatureEffectPropertyTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::CreatureVariationTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::CreatureVariationTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::CreatureVariationRuleTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::CreatureVariationRuleTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::EntityTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::EntityTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::EnvironmentClassTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::EnvironmentClassTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::FuelTypeTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::FuelTypeTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::GaitModifierTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::GaitModifierTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::GaitTypeTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::GaitTypeTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::GraphicTypeTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::GraphicTypeTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::GrowthTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::GrowthTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::InclusionTypeTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::InclusionTypeTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::InorganicTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::InorganicTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::MaterialPropertyTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::MaterialPropertyTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::MaterialStateTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::MaterialStateTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::MaterialTypeTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::MaterialTypeTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::MaterialUsageTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::MaterialUsageTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::ModificationTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::ModificationTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::PlantTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::PlantTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::PlantGraphicTemplateTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::PlantGraphicTemplateTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::PlantGrowthTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::PlantGrowthTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::PlantGrowthTypeTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::PlantGrowthTypeTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::PlantPartTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::PlantPartTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::PositionTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::PositionTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::SeasonTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::SeasonTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::SelectCreatureRuleTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::SelectCreatureRuleTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::ShrubTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::ShrubTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::SyndromeTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::SyndromeTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::TilePageTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::TilePageTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::TreeTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::TreeTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::tags::TwigPlacementTag>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::tags::TwigPlacementTag");
                eprintln!("{e:?}");
                String::new()
            }
        },
        // Now for the parsed raw definitions
        match export::<dfraw_parser::BodySize>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::BodySize");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Caste>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Caste");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Color>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Color");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Creature>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Creature");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::CreatureEffect>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::CreatureEffect");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::CreatureVariation>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::CreatureVariation");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::CustomGraphicExtension>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::CustomGraphicExtension");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Dimensions>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Dimensions");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Entity>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Entity");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Gait>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Gait");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Graphic>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Graphic");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::InfoFile>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::InfoFile");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Inorganic>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Inorganic");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Material>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Material");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::MaterialMechanics>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::MaterialMechanics");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::MaterialTemplate>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::MaterialTemplate");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::MechanicalProperties>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::MechanicalProperties");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Milkable>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Milkable");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Name>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Name");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Plant>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Plant");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::PlantGrowth>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::PlantGrowth");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Position>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Position");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::SeedMaterial>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::SeedMaterial");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::SelectCreature>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::SelectCreature");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Shrub>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Shrub");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::SpriteGraphic>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::SpriteGraphic");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::SpriteLayer>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::SpriteLayer");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::StateNames>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::StateNames");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::SteamData>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::SteamData");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Syndrome>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Syndrome");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Temperatures>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Temperatures");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Tile>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Tile");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::TilePage>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::TilePage");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::Tree>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::Tree");
                eprintln!("{e:?}");
                String::new()
            }
        },
        // Now for the metadata
        match export::<dfraw_parser::metadata::ObjectType>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::metadata::ObjectType");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::metadata::ParserOptions>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::metadata::ParserOptions");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::metadata::RawModuleLocation>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::metadata::RawModuleLocation");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::metadata::RawMetadata>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::metadata::RawMetadata");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_parser::metadata::TagComplexity>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::metadata::TagComplexity");
                eprintln!("{e:?}");
                String::new()
            }
        },
    ];

    // change missed into the number of missed bindings
    let missed = bindings.iter().filter(|x| x.is_empty()).count();
    // if there are missed bindings, print a warning
    if missed > 0 {
        eprintln!("Missed {missed} bindings");
    }

    // write the bindings to the output file
    ts_bindings.write(
        "dfraw_json_parser library",
        "DFRawJson.d.ts",
        None,
        &bindings.join("\n\n"),
    );
}

#[cfg(feature = "tauri")]
#[test]
fn export_tauri_ts_bindings() {
    // get our current working directory
    let cwd = std::env::current_dir().expect("Failed to get current working directory");
    // set lib/bindings/AllBindings.d.ts as the output file
    let output_dir = cwd.join("bindings");
    // make sure output dir exists
    std::fs::create_dir_all(&output_dir).expect("Failed to create output directory");
    eprintln!("Output dir: {:?}", &output_dir);
    let ts_bindings = TypescriptBinding::new(output_dir);

    let config = ExportConfig::default().bigint(BigIntExportBehavior::String);

    let bindings: Vec<String> = vec![
        match export::<dfraw_json_parser::ProgressDetails>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export progress::details::ProgressDetails");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_json_parser::ProgressTask>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export progress::tasks::ProgressTask");
                eprintln!("{e:?}");
                String::new()
            }
        },
        match export::<dfraw_json_parser::ProgressPayload>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export progress::payload::ProgressPayload");
                eprintln!("{e:?}");
                String::new()
            }
        },
        // add the needed type RawModuleLocation
        match export::<dfraw_parser::metadata::RawModuleLocation>(&config) {
            Ok(x) => x,
            Err(e) => {
                eprintln!("Failed to export dfraw_parser::metadata::RawModuleLocation");
                eprintln!("{e:?}");
                String::new()
            }
        },
    ];

    // change missed into the number of missed bindings
    let missed = bindings.iter().filter(|x| x.is_empty()).count();
    // if there are missed bindings, print a warning
    if missed > 0 {
        eprintln!("Missed {missed} bindings");
    }

    // write the bindings to the output file
    ts_bindings.write(
        "tauri_lib library",
        "DFRawJson-Tauri.d.ts",
        None,
        &bindings.join("\n\n"),
    );
}
