use specta::ts::{export, ExportConfiguration};

const DESTINATION_PATH: &str = "./bindings";

/// Function to write a binding string to a file
///
/// # Arguments
/// * `file_name` - The name of the file to write to
/// * `binding` - The binding string to write
fn write_binding(file_name: &str, bindings: &[&str]) {
    let path = format!("{DESTINATION_PATH}/{file_name}");
    let modified_content = format!(
        "// This file is generated by specta::ts. Do not manually modify!\n{}",
        bindings.join("\n\n")
    );

    // remove the file if it already exists
    if std::path::Path::new(&path).exists() {
        std::fs::remove_file(&path).unwrap();
    }

    std::fs::write(path, modified_content).unwrap();
}

#[test]
#[allow(clippy::too_many_lines)]
fn generate() {
    let bindings_a = vec![
        export::<dfraw_json_parser::biome::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::creature::Creature>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::creature::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::creature_caste::Gait>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::creature_caste::GaitType>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::creature_caste::GaitModifier>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
        export::<dfraw_json_parser::creature_caste::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::creature_caste::Caste>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::creature_effect::PropertyToken>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
        export::<dfraw_json_parser::creature_effect::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::creature_variation::CreatureVariation>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
        export::<dfraw_json_parser::creature_variation::Rule>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::creature_variation::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::entity::Entity>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::entity::Token>(&ExportConfiguration::default())
                .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::Graphic>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::SpriteGraphic>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::SpriteLayer>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::TilePage>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::ColorModificationToken>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::ConditionToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::GraphicTypeToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::GrowthToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::PlantGraphicTemplateToken>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
        export::<dfraw_json_parser::graphics::TilePageToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
            ];
    let bindings_b = vec![
        export::<dfraw_json_parser::inorganic::Inorganic>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::inorganic::EnvironmentClassToken>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
        export::<dfraw_json_parser::inorganic::InclusionTypeToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::inorganic::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::material::Material>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::material::FuelTypeToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::material::PropertyToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::material::StateToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::material::TypeToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::material::UsageToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::material_template::MaterialTemplate>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
        export::<dfraw_json_parser::plant::Plant>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::plant::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::plant_growth::PlantGrowth>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::plant_growth::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::plant_growth::TypeToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::plant_growth::PlantPartToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::position::Position>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::position::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::seed_material::SeedMaterial>(&ExportConfiguration::default())
            .unwrap_or_default(),
    ];
    let bindings_c = vec![
        export::<dfraw_json_parser::select_creature::SelectCreature>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
        export::<dfraw_json_parser::select_creature::SelectRules>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::shrub::Shrub>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::shrub::SeasonToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::shrub::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::syndrome::Syndrome>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::syndrome::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::tree::Tree>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::tree::Token>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::tree::TwigPlacementToken>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::unprocessed_raw::UnprocessedRaw>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
        export::<dfraw_json_parser::unprocessed_raw::Modification>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::MaterialMechanics>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::RawMetadata>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::ModuleInfoFile>(&ExportConfiguration::default())
            .unwrap_or_default(),
    ];
    let bindings_d = vec![
        export::<dfraw_json_parser::parser::StateName>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::MechanicalProperties>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::SteamData>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::Name>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::SingPlurName>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::ObjectType>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::RawModuleLocation>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::BodySize>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::Color>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::Milkable>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::Temperatures>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::Tile>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::graphics::Dimensions>(&ExportConfiguration::default())
            .unwrap_or_default(),
        export::<dfraw_json_parser::parser::graphics::CustomGraphicExtension>(
            &ExportConfiguration::default(),
        )
        .unwrap_or_default(),
    ];

    let bindings = bindings_a
        .iter()
        .chain(bindings_b.iter())
        .chain(bindings_c.iter())
        .chain(bindings_d.iter())
        .collect::<Vec<_>>();

    // Write to file
    write_binding(
        "AllBindings.d.ts",
        bindings
            .iter()
            .map(|s| s.as_str())
            .collect::<Vec<&str>>()
            .as_slice(),
    );
}
