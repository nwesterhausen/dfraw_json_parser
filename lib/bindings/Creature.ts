// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { Biome } from "./Biome";
import type { Caste } from "./Caste";
import type { CreatureTag } from "./CreatureTag";
import type { Name } from "./Name";
import type { RawMetadata } from "./RawMetadata";
import type { SelectCreature } from "./SelectCreature";
import type { SingPlurName } from "./SingPlurName";
import type { Tile } from "./Tile";

/**
 * The `Creature` struct represents a creature in a Dwarf Fortress, with the properties
 * that can be set in the raws. Not all the raws are represented here, only the ones that
 * are currently supported by the library.
 *
 * Some items like `CREATURE_VARIATION` and `CREATURE_VARIATION_CASTE` are saved in their raw
 * format. `SELECT_CREATURE` is saved here as a sub-creature object with all the properties
 * from that raw. This is because the `SELECT_CREATURE` raws are used to create new creatures
 * based on the properties of the creature they are applied to. But right now the application
 * of those changes is not applied, in order to preserve the original creature. So instead,
 * they are saved and can be applied later (at the consumer's discretion).
 */
export type Creature = {
  /**
   * The `metadata` field is of type `RawMetadata` and is used to provide additional information
   * about the raws the `Creature` is found in.
   */
  metadata: RawMetadata | null;
  /**
   * The `identifier` field is a string that represents the identifier of the creature. It is used
   * to uniquely identify the creature (however it is not guaranteed to be unique across object types
   * or all raws parsed, *especially* if you are parsing multiple versions of the same raws).
   */
  identifier: string;
  /**
   * The `castes` field is a vector of `Caste` objects. Each `Caste` object represents a caste of the
   * creature. For example, a creature may have a `MALE` and `FEMALE` caste. Each `Caste` object has
   * its own properties, such as `name`, `description`, `body`, `flags`, etc.
   *
   * A lot of the properties of the `Creature` object are actually properties of a special `Caste`, `ALL`.
   */
  castes: Array<Caste>;
  /**
   * Any tags that are not parsed into their own fields are stored in the `tags` field.
   */
  tags: Array<CreatureTag> | null;
  /**
   * The biomes that this creature can be found in.
   */
  biomes: Array<Biome> | null;
  /**
   * Pref strings are things that make dwarves (or others?) like or dislike the creature.
   */
  prefStrings: Array<string> | null;
  /**
   * The tile that represents the creature in the game (classic mode)
   */
  tile: Tile | null;
  /**
   * Determines the chances of a creature appearing within its environment, with higher values resulting in more frequent appearance.
   *
   * Also affects the chance of a creature being brought in a caravan for trading. The game effectively considers all creatures that
   * can possibly appear and uses the FREQUENCY value as a weight - for example, if there are three creatures with frequencies 10/25/50,
   * the creature with `[FREQUENCY:50]` will appear approximately 58.8% of the time.
   *
   * Defaults to 50 if not specified.
   *
   * Minimum value is 0, maximum value is 100.
   *
   * Note: not to be confused with [POP_RATIO].
   */
  frequency: number | null;
  /**
   * The minimum/maximum numbers of how many creatures per spawned cluster. Vermin fish with this token in combination with
   * temperate ocean and river biome tokens will perform seasonal migrations.
   *
   * Defaults to [1,1] if not specified.
   */
  clusterNumber: [number, number] | null;
  /**
   * The minimum/maximum numbers of how many of these creatures are present in each world map tile of the appropriate region.
   *
   * Defaults to [1,1] if not specified.
   */
  populationNumber: [number, number] | null;
  /**
   * Depth that the creature appears underground. Numbers can be from 0 to 5. 0 is actually 'above ground' and can be used if the
   * creature is to appear both above and below ground. Values from 1-3 are the respective cavern levels, 4 is the magma sea and
   * 5 is the HFS.
   *
   * A single argument may be used instead of min and max.
   *
   * Civilizations that can use underground plants or animals will only export (via the embark screen or caravans) things that are available at depth 1.
   *
   * Default [0, 0] (aboveground)
   */
  undergroundDepth: [number, number] | null;
  /**
   * Like `[BABYNAME]`, but applied regardless of caste.
   */
  generalBabyName: SingPlurName | null;
  /**
   * Like `[CHILDNAME]`, but applied regardless of caste.
   */
  generalChildName: SingPlurName | null;
  /**
   * The generic name for any creature of this type - will be used when distinctions between caste are unimportant. For names for specific castes,
   * use `[CASTE_NAME]` instead. If left undefined, the creature will be labeled as "nothing" by the game.
   */
  name: Name;
  /**
   * Copies another specified creature. This will override any definitions made before it; essentially, it makes this creature identical to the other one,
   * which can then be modified. Often used in combination with `[APPLY_CREATURE_VARIATION]` to import standard variations from a file.
   *
   * The vanilla giant animals and animal peoples are examples of this token combination.
   */
  copyTagsFrom: string | null;
  /**
   * Applies the specified creature variation.
   *
   * These are stored "in the raw", i.e. how they appear in the raws. They are not handled until the end of the parsing process.
   */
  applyCreatureVariation: Array<string> | null;
  /**
   * A generated field that is used to uniquely identify this object. It is generated from the `metadata`, `identifier`, and `ObjectType`.
   *
   * This field is always serialized.
   */
  objectId: string;
  /**
   * Various SELECT_CREATURE modifications.
   */
  selectCreatureVariation: Array<SelectCreature> | null;
};
